// Smart Context Mode - Semantic understanding of signage
export interface ContextualTerm {
  term: string;
  category: 'emergency' | 'transport' | 'medical' | 'religious' | 'commercial' | 'direction';
  icon: string;
  color: string;
  priority: number;
  translations: Record<string, string>;
}

export const CONTEXTUAL_DICTIONARY: ContextualTerm[] = [
  // Emergency terms
  {
    term: 'emergency',
    category: 'emergency',
    icon: 'ЁЯЪи',
    color: '#dc2626',
    priority: 10,
    translations: {
      devanagari: 'рдЖрдкрд╛рддрдХрд╛рд▓',
      tamil: 'роЕро╡роЪро░роиро┐ро▓рпИ',
      bengali: 'ржЬрж░рзБрж░рж┐',
      telugu: 'р░Ер░др▒Нр░пр░╡р░╕р░░',
      kannada: 'р▓др│Бр▓░р│Нр▓др│Б',
      malayalam: 'р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤┐р┤░',
      gujarati: 'ркХркЯрлЛркХркЯрлА',
      gurmukhi: 'риРриори░риЬрйИриВри╕рйА',
      odia: 'рмЬрм░рнБрм░рнАрмХрм╛рм│рнАрми'
    }
  },
  {
    term: 'hospital',
    category: 'medical',
    icon: 'ЁЯПе',
    color: '#059669',
    priority: 9,
    translations: {
      devanagari: 'рдЕрд╕реНрдкрддрд╛рд▓',
      tamil: 'рооро░рпБродрпНродрпБро╡рооройрпИ',
      bengali: 'рж╣рж╛рж╕ржкрж╛рждрж╛рж▓',
      telugu: 'р░Жр░╕р▒Бр░кр░др▒Нр░░р░┐',
      kannada: 'р▓Жр▓╕р│Нр▓кр▓др│Нр▓░р│Ж',
      malayalam: 'р┤Жр┤╢р╡Бр┤кр┤др╡Нр┤░р┤┐',
      gujarati: 'рк╣рлЛрк╕рлНрккрк┐ркЯрк▓',
      gurmukhi: 'ри╣ри╕рикридри╛ри▓',
      odia: 'рмбрм╛рмХрнНрмдрм░рмЦрм╛рмирм╛'
    }
  },
  {
    term: 'exit',
    category: 'direction',
    icon: 'ЁЯЪк',
    color: '#2563eb',
    priority: 8,
    translations: {
      devanagari: 'рдирд┐рдХрд╛рд╕',
      tamil: 'ро╡рпЖро│ро┐ропрпЗро▒рпБ',
      bengali: 'ржкрзНрж░рж╕рзНржерж╛ржи',
      telugu: 'р░ир░┐р░╖р▒Нр░Хр▒Нр░░р░ор░г',
      kannada: 'р▓ир▓┐р▓░р│Нр▓Чр▓ор▓и',
      malayalam: 'р┤кр╡Бр┤▒р┤др╡Нр┤др╡Бр┤Хр┤Яр┤Хр╡Нр┤Хр╡Бр┤Х',
      gujarati: 'ркмрк╣рк╛рк░ ркирлАркХрк│рлЛ',
      gurmukhi: 'римри╛ри╣ри░ риири┐риХри▓рйЛ',
      odia: 'рммрм╛рм╣рм╛рм░рмХрнБ'
    }
  },
  {
    term: 'station',
    category: 'transport',
    icon: 'ЁЯЪЙ',
    color: '#7c3aed',
    priority: 7,
    translations: {
      devanagari: 'рд╕реНрдЯреЗрд╢рди',
      tamil: 'роиро┐ро▓рпИропроорпН',
      bengali: 'рж╕рзНржЯрзЗрж╢ржи',
      telugu: 'р░╕р▒Нр░Яр▒Зр░╖р░ир▒Н',
      kannada: 'р▓ир▓┐р▓▓р│Нр▓жр▓╛р▓г',
      malayalam: 'р┤╕р╡Нр┤▒р╡Нр┤▒р╡Зр┤╖р╡╗',
      gujarati: 'рк╕рлНркЯрлЗрк╢рки',
      gurmukhi: 'ри╕риЯрйЗри╕ри╝рии',
      odia: 'рм╖рнНрмЯрнЗрм╕рми'
    }
  },
  {
    term: 'temple',
    category: 'religious',
    icon: 'ЁЯЫХ',
    color: '#ea580c',
    priority: 6,
    translations: {
      devanagari: 'рдордВрджрд┐рд░',
      tamil: 'роХрпЛропро┐ро▓рпН',
      bengali: 'ржоржирзНржжрж┐рж░',
      telugu: 'р░Чр▒Бр░бр░┐',
      kannada: 'р▓жр│Зр▓╡р▓╛р▓▓р▓п',
      malayalam: 'р┤Хр╡Нр┤╖р╡Зр┤др╡Нр┤░р┤В',
      gujarati: 'ркоркВркжрк┐рк░',
      gurmukhi: 'риорй░рижри░',
      odia: 'рмормирнНрмжрм┐рм░'
    }
  },
  {
    term: 'danger',
    category: 'emergency',
    icon: 'тЪая╕П',
    color: '#dc2626',
    priority: 10,
    translations: {
      devanagari: 'рдЦрддрд░рд╛',
      tamil: 'роЖрокродрпНродрпБ',
      bengali: 'ржмрж┐ржкржж',
      telugu: 'р░кр▒Нр░░р░ор░╛р░жр░В',
      kannada: 'р▓Ер▓кр▓╛р▓п',
      malayalam: 'р┤Ер┤кр┤Хр┤Яр┤В',
      gujarati: 'ркЬрлЛркЦрко',
      gurmukhi: 'риЦри╝ридри░ри╛',
      odia: 'рммрм┐рмкрмж'
    }
  }
];

export class SmartContextEngine {
  private dictionary = CONTEXTUAL_DICTIONARY;
  private isEnabled = true;

  detectContextualTerms(text: string, script: string): Array<{
    term: ContextualTerm;
    position: { start: number; end: number };
    confidence: number;
  }> {
    if (!this.isEnabled) return [];

    const detectedTerms: Array<{
      term: ContextualTerm;
      position: { start: number; end: number };
      confidence: number;
    }> = [];

    const normalizedText = text.toLowerCase();

    for (const term of this.dictionary) {
      // Check if the term exists in the current script
      const scriptTranslation = term.translations[script];
      if (!scriptTranslation) continue;

      const index = normalizedText.indexOf(scriptTranslation.toLowerCase());
      if (index !== -1) {
        detectedTerms.push({
          term,
          position: {
            start: index,
            end: index + scriptTranslation.length
          },
          confidence: 0.9
        });
      }

      // Also check English term
      const englishIndex = normalizedText.indexOf(term.term);
      if (englishIndex !== -1) {
        detectedTerms.push({
          term,
          position: {
            start: englishIndex,
            end: englishIndex + term.term.length
          },
          confidence: 0.85
        });
      }
    }

    // Sort by priority (emergency terms first)
    return detectedTerms.sort((a, b) => b.term.priority - a.term.priority);
  }

  enhanceTransliteration(
    originalText: string,
    transliteratedText: string,
    sourceScript: string,
    targetScript: string
  ): {
    enhancedText: string;
    contextualInfo: Array<{
      term: string;
      icon: string;
      category: string;
      color: string;
    }>;
  } {
    const detectedTerms = this.detectContextualTerms(originalText, sourceScript);
    let enhancedText = transliteratedText;
    const contextualInfo: Array<{
      term: string;
      icon: string;
      category: string;
      color: string;
    }> = [];

    for (const detected of detectedTerms) {
      const { term } = detected;
      const targetTranslation = term.translations[targetScript];
      
      if (targetTranslation) {
        // Add icon to the transliterated text
        enhancedText = enhancedText.replace(
          targetTranslation,
          `${term.icon} ${targetTranslation}`
        );

        contextualInfo.push({
          term: targetTranslation,
          icon: term.icon,
          category: term.category,
          color: term.color
        });
      }
    }

    return { enhancedText, contextualInfo };
  }

  getEmergencyTerms(): ContextualTerm[] {
    return this.dictionary.filter(term => term.category === 'emergency');
  }

  isEmergencyDetected(text: string, script: string): boolean {
    const emergencyTerms = this.getEmergencyTerms();
    const normalizedText = text.toLowerCase();

    return emergencyTerms.some(term => {
      const translation = term.translations[script];
      return translation && normalizedText.includes(translation.toLowerCase());
    });
  }

  toggle(enabled: boolean): void {
    this.isEnabled = enabled;
  }

  isActive(): boolean {
    return this.isEnabled;
  }
}

export const smartContextEngine = new SmartContextEngine();
